/**
* DO NOT EDIT THIS FILE.
* See the following change record for more information,
* https://www.drupal.org/node/2815083
* @preserve
**/

(function ($, Drupal) {
  Drupal.behaviors.textSummary = {
    attach: function attach(context, settings) {
      once('text-summary', '.js-text-summary', context).forEach(function (summary) {
        var $widget = $(summary).closest('.js-text-format-wrapper');
        var $summary = $widget.find('.js-text-summary-wrapper');
        var $summaryLabel = $summary.find('label').eq(0);
        var $full = $widget.children('.js-form-type-textarea');
        var $fullLabel = $full.find('label').eq(0);
        var $hint = $('<span class="text-area-hint" aria-hidden="true" role="button" aria-label="Sugo" >Alt + 0 a kisegítő utasítások megjelenítéséhez</span>');

        if ($fullLabel.length === 0) {
          $fullLabel = $('<label></label>').prependTo($full);
        }

        $($hint).insertAfter($fullLabel);

        if ($fullLabel.hasClass('visually-hidden')) {
          $fullLabel.html(function (index, oldHtml) {
            return "<span class=\"visually-hidden\">".concat(oldHtml, "</span>");
          });
          $fullLabel.removeClass('visually-hidden');
        }

        var $link = $("<span class=\"field-edit-link\"> (<button type=\"button\" class=\"link link-edit-summary\">".concat(Drupal.t('Hide summary'), "</button>)</span>"));
        var $button = $link.find('button');
        var toggleClick = true;

        $summary.prepend('<div id="summary-message" role="contentinfo" tabindex="0" class="messages messages--status">Adjon meg rövid összefoglalást!</div>');
        $('messages').hide();

        $hint.on('click', function (e) {
          e.preventDefault();
          // focus goes to body text area
          $(".cke_button_icon.cke_button__bold_icon").attr('tabindex', 0).focus();
          $(".cke_button_icon.cke_button__bold_icon").attr('tabindex', 0).focus();
        });


        $link.on('click', function (e) {
          if (toggleClick) {
            $summary.hide();
            $button.html(Drupal.t('Edit summary'));
            $link.appendTo($fullLabel);

            $('messages').hide();

          } else {
            $summary.show();
            $button.html(Drupal.t('Hide summary'));
            $link.appendTo($summaryLabel);

            $('messages').show();
            $("#summary-message").attr('tabindex', -1).focus();
            $("#edit-body-0-summary").focus(); // focus goes to summary text area
            $(".link.link-edit-summary").click(function () {
              console.log('klikk');
              $(".cke_button_icon.cke_button__bold_icon").attr('tabindex', 0).focus();
              $(".cke_button_icon.cke_button__bold_icon").attr('tabindex', 0).focus(); // focus goes to body text area
            })
          }
          e.preventDefault();
          toggleClick = !toggleClick;
        }).appendTo($summaryLabel);

        if ($widget.find('.js-text-summary').val() === '') {
          $link.trigger('click');
          console.log("page load");
        }
      });
    }
  };

  // all elements with the class ".form-item--error"
  var formErrors = $(".form-item--error");

  // defining static Label to with an ID will be associated based on error count on the page
  const errorPrefix = "errorDescriptionForItem-";

  // function that takes and element that has targeted error class and index item that serves as a unique ID 
  function addErrorDescription(addErrorDescriptionTarget, errorIndex) {
    $(addErrorDescriptionTarget).find("input.error").attr("aria-describedby", errorPrefix + errorIndex);
    $(addErrorDescriptionTarget).find(".form-item--error-message").attr("id", errorPrefix + errorIndex);
  }

  // this for loops trough all form errors on the page and calls the addErrorDescription on each item  
  for (let formErrorIndex = 0; formErrorIndex < formErrors.length; formErrorIndex++) {
    addErrorDescription($(formErrors[formErrorIndex]), formErrorIndex);
  }
  var keys = [], alt = 18, zero = 48;
  // listen for which key is pressed
  document.addEventListener('keydown', (e) => {
    if ($.inArray(e.keyCode, keys) == -1) {
      keys.push(e.keyCode);
    }
  });

  // listen for which key is unpressed
  document.addEventListener('keyup', (e) => {
    // the key to remove
    var removeKey = e.keyCode;
    // rmeove it
    keys = $.grep(keys, function (value) {
      return value != removeKey;
    });

  });

  document.addEventListener('keydown', (e) => {
    if ($.inArray(alt, keys) != -1 && $.inArray(zero, keys) != -1) { //
      $(".cke_button_icon.cke_button__bold_icon").attr('tabindex', 0).focus();
      $(".cke_button_icon.cke_button__bold_icon").attr('tabindex', 0).focus(); // focus goes to body text are
    }
  })


})(jQuery, Drupal);