/**
* DO NOT EDIT THIS FILE.
* See the following change record for more information,
* https://www.drupal.org/node/2815083
* @preserve
**/

(function ($, Drupal, drupalSettings) {
  var activeItem = Drupal.url(drupalSettings.path.currentPath);

  $.fn.drupalToolbarMenu = function () {
    var ui = {
      handleOpen: Drupal.t('Extend'),
      handleClose: Drupal.t('Collapse')
    };

    function toggleList($item, switcher) {
      var $toggle = $item.children('.toolbar-box').children('.toolbar-handle');
      switcher = typeof switcher !== 'undefined' ? switcher : !$item.hasClass('open');
      $item.toggleClass('open', switcher);
      $toggle.toggleClass('open', switcher);
      $toggle.attr('aria-expanded', switcher);
      $toggle.find('.action').text(switcher ? ui.handleClose : ui.handleOpen);
    }

    function toggleClickHandler(event) {
      var $toggle = $(event.target);
      var $item = $toggle.closest('li');
      toggleList($item);
      var $openItems = $item.siblings().filter('.open');
      toggleList($openItems, false);
    }

    function linkClickHandler(event) {
      if (!Drupal.toolbar.models.toolbarModel.get('isFixed')) {
        Drupal.toolbar.models.toolbarModel.set('activeTab', null);
      }

      event.stopPropagation();
    }

    function initItems($menu) {
      var options = {
        class: 'toolbar-icon toolbar-handle',
        action: ui.handleOpen,
        text: ''
      };
      $menu.find('li > a').wrap('<div class="toolbar-box">');
      $menu.find('li').each(function (index, element) {
        var $item = $(element);

        if ($item.children('ul.toolbar-menu').length) {
          var $box = $item.children('.toolbar-box');
          options.text = Drupal.t('@label', {
            '@label': $box.find('a').text()
          });
          $item.children('.toolbar-box').append(Drupal.theme('toolbarMenuItemToggle', options));
        }
      });
    }

    function markListLevels($lists, level) {
      level = !level ? 1 : level;
      var $lis = $lists.children('li').addClass("level-".concat(level));
      $lists = $lis.children('ul');

      if ($lists.length) {
        markListLevels($lists, level + 1);
      }
    }

    function openActiveItem($menu) {
      var pathItem = $menu.find("a[href=\"".concat(window.location.pathname, "\"]"));

      if (pathItem.length && !activeItem) {
        activeItem = window.location.pathname;
      }

      if (activeItem) {
        var $activeItem = $menu.find("a[href=\"".concat(activeItem, "\"]")).addClass('menu-item--active');
        var $activeTrail = $activeItem.parentsUntil('.root', 'li').addClass('menu-item--active-trail');
        toggleList($activeTrail, true);
      }
    }

    return this.each(function (selector) {
      var menu = once('toolbar-menu', this);

      if (menu.length) {
        var $menu = $(menu);
        $menu.on('click.toolbar', '.toolbar-box', toggleClickHandler).on('click.toolbar', '.toolbar-box a', linkClickHandler);
        $menu.addClass('root');
        initItems($menu);
        markListLevels($menu);
        openActiveItem($menu);
      }
    });
  };

  Drupal.theme.toolbarMenuItemToggle = function (options) {
    return "<button class=\"".concat(options.class, "\" aria-expanded=\"false\"><span class=\"action\">").concat(options.action, "</span> <span class=\"label\">").concat(options.text, "</span></button>");
  };

  // This function is intended to use with for Responsive tables
  // The function accepts a table object and parses header elements and adds these to corresponding body element
  function adjustTableView(tabelToAdjust) {

    // this "labels" array will contain the labels extracted from table Head
    let labels = [];

    // table header object from table object
    let headerContent = $(tabelToAdjust).find('thead').find("tr");

    // table body object from table object
    let tableItems = $(tabelToAdjust).find('tbody');

    // this for loops trough all objects inside the header object from the table
    for (let thIndex = 0; thIndex < headerContent.find('th').length; thIndex++) {
      var targetHead = headerContent.find('th:eq(' + thIndex + ')');
      labels.push(targetHead.text());
    }

    // this for loops trough all table row elements inside the table body object
    for (let trIndex = 0; trIndex < tableItems.find('tr').length; trIndex++) {
      // console.log(trIndex);
      // / this for loops trough all td elements inside the table row item 
      for (let tdIndex = 0; tdIndex < tableItems.find('tr:eq(' + trIndex + ')').find('td').length; tdIndex++) {
        // console.log(labels[tdIndex]);
        let target = tableItems.find('tr:eq(' + trIndex + ')').find('td:eq(' + tdIndex + ')');
        if (tdIndex < headerContent.find('th').length) {
          $($(target)).prepend('<span class="mobile-label">' + labels[tdIndex], + '</span>');
        }
      }
      // resting counter
      tdIndex = 0;
    }
  }

  // contains all Table elements in view that have "responsive-enabled" 
  let tablesInView = $("table.responsive-enabled");

  // this for loops trough all tables and calls the adjustment function for each
  for (let tableIndex = 0; tableIndex < tablesInView.length; tableIndex++) {
    adjustTableView($(tablesInView[tableIndex]));
  }

  $('.toolbar-bar').children('div').keydown(function (e) {
    if (e.keyCode === 32) {
      e.preventDefault();
      $(this).children('a').click();
    }
  });

})(jQuery, Drupal, drupalSettings);